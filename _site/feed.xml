<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wode &quot;Nimo&quot; Ni</title>
    <description>In the ocean of code, I swim.</description>
    <link>http://www.columbia.edu/~wn2155//</link>
    <atom:link href="http://www.columbia.edu/~wn2155//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 28 Jan 2018 23:47:03 -0500</pubDate>
    <lastBuildDate>Sun, 28 Jan 2018 23:47:03 -0500</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>Introducing MPL: Matrix Processing Language</title>
        <description>&lt;p&gt;&lt;img src=&quot;/~wn2155//images/mpl-logo.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I know. The name is pretty lame, because we had to come up with a name before we start the project and even learn anything about compilers and programming language design. In retrospect, I would have called it something like “Moore” or “Cell” (okay, probably not good names either &lt;img class=&quot;emoji&quot; title=&quot;:disappointed:&quot; alt=&quot;:disappointed:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f61e.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;).&lt;/p&gt;

&lt;p&gt;MPL is a programming language that I, along with 3 other fellow classmates, designed and implemented for COMS 4115 - Programming languages and Translator. It is a Domain Specific Language (DSL), meaning it does not work for everything. Instead, MPL deals with matrices and images. We wanted it to be concise, cool, and reasonable to implement because this is a ~2-month course project.&lt;/p&gt;

&lt;p&gt;We designed the language to be light-weight. Something like a scripting language using which we can quickly load images and run image processing operations on them. A simple example is blurring:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgmread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lena.pgm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blur&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgmwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lena-out.pgm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The program converts the image to the left to the one to the right, as shown here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/~wn2155//images/2017-05-30-introducing-mpl-73576.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The one line that does the trick is&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;blur&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We call &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; the &lt;strong&gt;apply operator&lt;/strong&gt;, read as “apply to”. This line “applies” the &lt;code class=&quot;highlighter-rouge&quot;&gt;blur&lt;/code&gt; function on a matrix, which represents an image. The &lt;code class=&quot;highlighter-rouge&quot;&gt;blur&lt;/code&gt; function is not a normal function you see in C and Java. Instead, like all other MPL functions, &lt;code class=&quot;highlighter-rouge&quot;&gt;blur&lt;/code&gt; is an &lt;strong&gt;entry function&lt;/strong&gt;, which can only be “applied” to a matrix.&lt;/p&gt;

&lt;p&gt;It turns out that mathematically, the blurring procedure can be modeled as a “convolution” between a kernel and matrix. Inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;blur&lt;/code&gt; is essentially a kernel. See &lt;a href=&quot;http://setosa.io/ev/image-kernels/&quot;&gt;here&lt;/a&gt; for an excellent visual explanation.&lt;/p&gt;

&lt;p&gt;In MPL, each entry function has access to its immediate neighbors. This might sound insufficient, but it turns out that local operations on small neighborhood can achieve a great deal! In MPL, we are using 8-neighborhood, also called &lt;a href=&quot;https://en.wikipedia.org/wiki/Moore_neighborhood&quot;&gt;&lt;strong&gt;Moore Neighborhood&lt;/strong&gt;&lt;/a&gt; (hence the alternative name).&lt;/p&gt;

&lt;p&gt;Of course, people have thought about this idea in PLT a long time ago and came up with syntax for convolution. In MPL, we generalized this idea to support conditionals, which is more than convolution (technically, not linear shift invariant).&lt;/p&gt;

&lt;p&gt;One day a teammate showed me this epic video of Conway’s game of life. I was amazed by the complexity of the scenes and also the simplicity of the game itself.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/C2vgICfQawE?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This turned out to be the final demo. We did a glider gun, which regularly shoots out “gliders”. We resolved edges by wrap-around. That’s why you see the gliders come back to destroy the gun.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/~wn2155//images/gun.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a spaceship that we simulated (this thing is quite huge, the console can’t keep up with the refresh rate all the time &lt;img class=&quot;emoji&quot; title=&quot;:grin:&quot; alt=&quot;:grin:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f601.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/~wn2155//images/ship.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The language is far from complete due to the time limit and the fact that I was taking OS at the same time (maybe I’ll talk about the pain and gain in that class later). I still like it a lot because we built a complete compiler from scratch, which turned out to be an extremely fun process, and we got some visually pleasing results at the end.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 May 2017 00:00:00 -0400</pubDate>
        <link>http://www.columbia.edu/~wn2155//2017/introducing-mpl/</link>
        <guid isPermaLink="true">http://www.columbia.edu/~wn2155//2017/introducing-mpl/</guid>
        
        <category>PL</category>
        
        <category>Columbia</category>
        
        <category>OCaml</category>
        
        
        <category>Technical</category>
        
        <category>Programming Languages</category>
        
      </item>
    
      <item>
        <title>Hello, World</title>
        <description>&lt;p&gt;Welcome. This blog contains both Chinese and English contents, mostly related to CS.&lt;/p&gt;

&lt;p&gt;In the past 23 years, I made dozens of attempts to write blog/journal/articles regularly, and it never worked. Therefore, I decided not to make that promise again. I will post things whenever I like.
&lt;!-- I do think, however, the frequency of writing ($$\mu$$) is positively correlated with the quality of my life ($$Q$$). I hope $$\mu \rightarrow \infty$$ &lt;img class=&#39;emoji&#39; title=&#39;:grin:&#39; alt=&#39;:grin:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f601.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt;. --&gt;&lt;/p&gt;

&lt;p&gt;I will migrate some old posts in Chinese from &lt;code class=&quot;highlighter-rouge&quot;&gt;nimoni.org&lt;/code&gt;, my last failed attempt to blog. I didn’t really speak English back then, sorry.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 May 2017 04:28:23 -0400</pubDate>
        <link>http://www.columbia.edu/~wn2155//2017/hello-world/</link>
        <guid isPermaLink="true">http://www.columbia.edu/~wn2155//2017/hello-world/</guid>
        
        <category>random</category>
        
        
        <category>non-tech</category>
        
      </item>
    
      <item>
        <title>鬼城</title>
        <description>&lt;p&gt;我大概算是多梦的人。&lt;/p&gt;

&lt;p&gt;和大多数人一样梦境也是丰富多彩的，牛鬼蛇神丰乳肥臀未来机甲一个不差。对于自己梦到过的事物我总是很珍惜，半夜惊醒的时候总会绷着脑神经试图把溜走的场景记住，或者是手忙脚乱地在小本子上记录。后来仔细一想，就像总是想不起一个人的相貌一样，梦里人们的脸也好像是模糊的，好像都是匆忙换上戏服戴着劣质人皮面具的僵尸们，记忆的价值也没多大。记不起也说不清。&lt;/p&gt;

&lt;p&gt;我反倒是执迷于那些罩着浅淡薄雾的场景。光怪陆离的校道，尸首横陈的购物广场，排满整齐白色椅子的电影院，超现实的梦境们似乎总是在固定的地方发生，而这些地方又都似曾相识却又无比陌生。弗洛伊德说我们趋向于摄取记忆中最不起眼的边角料构筑梦境，大概是因为这个吧。梦开始的时候其他人们总是突然地出现，无声无息地把我带入情节，又在尾声的时候无声无息地消失，他们消失的间隙我的梦境就像一座鬼城，熙攘的人群似乎都蒸发了，目力所及都是空荡荡的，空间也变得宽阔起来。我总会想起梦境里这些瞬间，我独自站在空荡场景的中央，绞尽脑汁回忆的同时内心里却出乎意料的平静，就像这些鬼城一样默不作声。&lt;/p&gt;

&lt;p&gt;就像盗梦空间里面第四层梦里男女主角的小城一样，我的鬼城似乎也是由一块一块互不相称的场景们拼凑成的，像是衣服上五彩斑斓的补丁。我总能把那些自己最喜欢的地方用奇怪的方式放在一起，这样一转头就能到想去的地方，一闭眼就能唤出相见的人，他们带着模糊的人皮面具，跟我沉默地谈笑风生。&lt;/p&gt;

&lt;p&gt;从那以后我心里大概总是有这么一座鬼城。挂念得人总在我肩畔，喜欢喝的茶总在手边，转头就能看见自己喜欢的场景们空荡荡地凑在一起。现在我好像理解为什么古代坐拥江山的统治者们总是希望建造微缩的山水，集成的天下了，他们估计也是想把自己喜欢的东西摆在一块吧。&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Nov 2013 00:00:00 -0500</pubDate>
        <link>http://www.columbia.edu/~wn2155//2013/ghost-town/</link>
        <guid isPermaLink="true">http://www.columbia.edu/~wn2155//2013/ghost-town/</guid>
        
        <category>random</category>
        
        
        <category>non-tech</category>
        
      </item>
    
  </channel>
</rss>
